# Generated by Django 5.1.5 on 2025-08-30 06:05

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ContactMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Contact Method Name')),
                ('type', models.CharField(choices=[('phone', 'Phone'), ('email', 'Email'), ('address', 'Address'), ('social', 'Social Media'), ('other', 'Other')], max_length=50, verbose_name='Contact Type')),
                ('value', models.CharField(max_length=500, verbose_name='Contact Value')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Primary Contact Method')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Display Order')),
            ],
            options={
                'verbose_name': 'Contact Method',
                'verbose_name_plural': 'Contact Methods',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=500, verbose_name='Question')),
                ('answer', models.TextField(verbose_name='Answer')),
                ('category', models.CharField(choices=[('general', 'General'), ('pricing', 'Pricing'), ('services', 'Services'), ('technical', 'Technical'), ('support', 'Support')], default='general', max_length=100, verbose_name='Category')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Display Order')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created Date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
            ],
            options={
                'verbose_name': 'FAQ',
                'verbose_name_plural': 'FAQs',
                'ordering': ['category', 'order', 'question'],
            },
        ),
        migrations.CreateModel(
            name='NewsletterSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('first_name', models.CharField(blank=True, max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=100, verbose_name='Last Name')),
                ('subscribed_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Subscription Date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active Subscription')),
                ('source', models.CharField(choices=[('contact-form', 'Contact Form'), ('website', 'Website Signup'), ('manual', 'Manual Entry')], default='website', max_length=100, verbose_name='Subscription Source')),
            ],
            options={
                'verbose_name': 'Newsletter Subscription',
                'verbose_name_plural': 'Newsletter Subscriptions',
                'ordering': ['-subscribed_at'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Service Name')),
                ('description', models.TextField(verbose_name='Service Description')),
                ('short_description', models.CharField(max_length=300, verbose_name='Short Description')),
                ('icon_class', models.CharField(max_length=100, verbose_name='Icon CSS Class')),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Base Price')),
                ('price_period', models.CharField(choices=[('one-time', 'One Time'), ('monthly', 'Monthly'), ('yearly', 'Yearly')], max_length=50, verbose_name='Price Period')),
                ('features', models.JSONField(default=list, help_text='List of features included in this service', verbose_name='Service Features')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Featured Service')),
                ('is_popular', models.BooleanField(default=False, verbose_name='Popular Service')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Display Order')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Testimonial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doctor_name', models.CharField(max_length=200, verbose_name='Doctor Name')),
                ('practice_name', models.CharField(max_length=200, verbose_name='Practice Name')),
                ('specialty', models.CharField(max_length=100, verbose_name='Medical Specialty')),
                ('testimonial_text', models.TextField(verbose_name='Testimonial')),
                ('rating', models.PositiveIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], verbose_name='Rating')),
                ('doctor_image', models.ImageField(blank=True, null=True, upload_to='testimonials/', verbose_name='Doctor Photo')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Featured Testimonial')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created Date')),
            ],
            options={
                'verbose_name': 'Testimonial',
                'verbose_name_plural': 'Testimonials',
                'ordering': ['-is_featured', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContactInquiry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('email', models.EmailField(max_length=254, verbose_name='Email Address')),
                ('phone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Please enter a valid phone number', regex='^[\\+]?[1-9][\\d]{0,15}$')], verbose_name='Phone Number')),
                ('practice_name', models.CharField(max_length=200, verbose_name='Practice Name')),
                ('specialty', models.CharField(choices=[('family-medicine', 'Family Medicine'), ('cardiology', 'Cardiology'), ('dermatology', 'Dermatology'), ('orthopedics', 'Orthopedics'), ('pediatrics', 'Pediatrics'), ('dental', 'Dental'), ('ophthalmology', 'Ophthalmology'), ('neurology', 'Neurology'), ('psychiatry', 'Psychiatry'), ('surgery', 'Surgery'), ('other', 'Other')], max_length=100, verbose_name='Medical Specialty')),
                ('location', models.CharField(max_length=200, verbose_name='Practice Location')),
                ('current_website', models.URLField(blank=True, verbose_name='Current Website')),
                ('services_needed', models.JSONField(default=list, help_text='List of services the doctor is interested in', verbose_name='Services Interested In')),
                ('budget_range', models.CharField(blank=True, choices=[('under-500', 'Under $500'), ('500-1000', '$500 - $1,000'), ('1000-2000', '$1,000 - $2,000'), ('2000-5000', '$2,000 - $5,000'), ('over-5000', 'Over $5,000')], max_length=50, verbose_name='Monthly Budget Range')),
                ('timeline', models.CharField(blank=True, choices=[('immediately', 'Immediately'), ('1-month', 'Within 1 month'), ('3-months', 'Within 3 months'), ('6-months', 'Within 6 months'), ('planning', 'Just planning/exploring')], max_length=50, verbose_name='Project Timeline')),
                ('message', models.TextField(verbose_name='Project Description')),
                ('newsletter_subscription', models.BooleanField(default=False, verbose_name='Newsletter Subscription')),
                ('submitted_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Submission Date')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('status', models.CharField(choices=[('new', 'New'), ('contacted', 'Contacted'), ('qualified', 'Qualified'), ('proposal', 'Proposal Sent'), ('negotiating', 'Negotiating'), ('closed', 'Closed'), ('lost', 'Lost')], default='new', max_length=50, verbose_name='Status')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=50, verbose_name='Priority')),
                ('assigned_to', models.CharField(blank=True, max_length=100, verbose_name='Assigned To')),
                ('notes', models.TextField(blank=True, verbose_name='Internal Notes')),
                ('last_contacted', models.DateTimeField(blank=True, null=True, verbose_name='Last Contacted')),
            ],
            options={
                'verbose_name': 'Contact Inquiry',
                'verbose_name_plural': 'Contact Inquiries',
                'ordering': ['-submitted_at'],
                'indexes': [models.Index(fields=['status', 'submitted_at'], name='home_contac_status_19460c_idx'), models.Index(fields=['specialty', 'submitted_at'], name='home_contac_special_934c17_idx'), models.Index(fields=['email'], name='home_contac_email_5df6b8_idx')],
            },
        ),
        migrations.CreateModel(
            name='ContactLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('email_sent', 'Email Sent'), ('phone_call', 'Phone Call'), ('meeting_scheduled', 'Meeting Scheduled'), ('proposal_sent', 'Proposal Sent'), ('follow_up', 'Follow Up'), ('other', 'Other')], max_length=100, verbose_name='Action Taken')),
                ('description', models.TextField(verbose_name='Action Description')),
                ('outcome', models.TextField(blank=True, verbose_name='Outcome')),
                ('next_action', models.TextField(blank=True, verbose_name='Next Action')),
                ('scheduled_date', models.DateTimeField(blank=True, null=True, verbose_name='Scheduled Date')),
                ('performed_by', models.CharField(max_length=100, verbose_name='Performed By')),
                ('performed_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Performed At')),
                ('inquiry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_logs', to='home.contactinquiry', verbose_name='Contact Inquiry')),
            ],
            options={
                'verbose_name': 'Contact Log',
                'verbose_name_plural': 'Contact Logs',
                'ordering': ['-performed_at'],
            },
        ),
    ]
